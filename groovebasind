#!/usr/bin/env coffee

fs = require 'fs'
http = require 'http'
net = require 'net'
socketio = require 'socket.io'
static = require 'node-static'
nconf = require 'nconf'
formidable = require 'formidable'
url = require 'url'
util = require 'util'

nconf
  .argv()
  .env()
# these files in the wrong order because of
# https://github.com/flatiron/nconf/issues/28
  .file({file: "/etc/groovebasinrc"})
  .file({file: "#{process.env.HOME}/.groovebasinrc"})
  .defaults
    log_level: 3
    http:
      port: 80
    mpd:
      host: 'localhost'
      port: 6600
      conf: "/etc/mpd.conf"

# read mpd conf
music_directory = null
fs.readFile nconf.get('mpd:conf'), (err, data) ->
  m = data.toString().match /^music_directory\s+"(.*)"$/m
  music_directory = m[1] if m?
  if music_directory?
    console.log "Music directory: #{music_directory}"
  else
    console.log "ERROR - music directory not found"

# check for library link
public_dir = "./public"
library_link = public_dir + "/library"
fs.readdir library_link, (err, files) ->
  err? and console.log "ERROR: #{library_link} not linked to media library"

moveFile = (source, dest) ->
  in_stream = fs.createReadStream(source)
  out_stream = fs.createWriteStream(dest)
  util.pump in_stream, out_stream, -> fs.unlink source

# static server
fileServer = new (static.Server) './public'
app = http.createServer((request, response) ->
  parsed_url = url.parse(request.url)
  if parsed_url.pathname == '/upload' and request.method == 'POST'
    form = new formidable.IncomingForm()
    form.parse request, (err, fields, file) ->
      moveFile file.qqfile.path, "#{music_directory}/#{file.qqfile.name}"
      response.writeHead 200, {'content-type': 'text/html'}
      response.end JSON.stringify {success: true}
  else
    request.addListener 'end', ->
      fileServer.serve request, response
).listen(nconf.get('http:port'))
console.log "Attempting to serve http://localhost:#{nconf.get('http:port')}/"

io = socketio.listen(app)
io.set 'log level', nconf.get('log_level')
io.sockets.on 'connection', (socket) ->
  mpd = net.connect nconf.get('mpd:port'), nconf.get('mpd:host'), ->
    console.log "mpd connect"
  mpd.on 'data', (data) ->
    socket.emit 'FromMpd', data.toString()
  mpd.on 'end', ->
    console.log "mpd disconnect"
    try socket.emit 'disconnect'
  mpd.on 'error', ->
    console.log "No mpd daemon found."

  socket.on 'ToMpd', (data) ->
    console.log "[in] " + data
    try mpd.write data

  socket.on 'disconnect', -> mpd.end()
