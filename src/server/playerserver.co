{EventEmitter} = require 'events'

command_permissions =
  addid: \add
  clear: \control
  currentsong: \read
  deleteid: \control
  listallinfo: \read
  listplaylist: \read
  listplaylists: \read
  lsinfo: \read
  move: \control
  next: \control
  password: null
  pause: \control
  play: \control
  playid: \control
  playlistadd: \add
  playlistinfo: \read
  previous: \control
  repeat: \control
  seekid: \control
  setvol: \control
  shuffle: \control
  status: \read
  sticker: \admin
  stop: \control

function qEscape (str)
  # replace all " with \"
  str.toString().replace /"/g, '\\"'

module.exports = class PlayerServer extends EventEmitter
  (@library, @parser, @authenticate) ~>
    @parser.on \status, !(arg) ~> @emit \status, arg
    @parser.on \error, !(msg) ~> @emit \error, msg

  createClient: (socket, permissions) ->
    # TODO: encapsulate client object
    client = socket
    client.permissions = permissions
    socket.on \request, !(request) ~>
      request = JSON.parse request
      @request client, request.cmd, !(arg) ~>
        response = JSON.stringify {callback_id: request.callback_id} <<< arg
        socket.emit \PlayerResponse, response
    # TODO: clean up these listeners when the socket disconnects
    @on \status, !(arg) ~> try socket.emit \PlayerStatus, JSON.stringify arg
    @on \error,  !(msg) ~> try socket.emit \MpdError, msg

    socket.emit 'Permissions', JSON.stringify(permissions)
    @on 'password', !(pass) ~>
      if success = (ref = @authenticate(pass))?
        client.permissions := ref
      socket.emit 'Permissions', JSON.stringify(client.permissions)
      socket.emit 'PasswordResult', JSON.stringify(success)

    return client

  request: !(client, request, cb=->) ->
    !~function send_cmds_to_mpd (cmds)
      @parser.sendRequest "command_list_begin\n#{cmds.join("\n")}\ncommand_list_end", cb

    ~function check_permission (name)
      permission = command_permissions[name]
      return true if permission is null
      return true if client.permissions[permission]
      err = "command #{JSON.stringify name} requires permission #{JSON.stringify permission}"
      console.warn "permissions error:", err
      cb {err}
      return false

    if typeof request is 'object'
      # new-style command is an object
      {name} = request
      return unless check_permission name
      switch name
        case \listallinfo then @library.get_library (library) -> cb {msg: library}
        case \addid       then send_cmds_to_mpd ("addid \"#{qEscape file}\" #{Number pos}" for {file, pos} of request.items)
        case \deleteid    then send_cmds_to_mpd ("deleteid #{Number id}" for id of request.ids)
        case \move        then send_cmds_to_mpd ("moveid #{Number id} #{Number pos}" for {id, pos} of request.items)
        case \repeat
          send_cmds_to_mpd [
            "repeat #{Number(request.repeat)}"
            "single #{Number(request.single)}"
          ]
        case \password
          @emit 'password', request.password
        default throw new Error "invalid command #{JSON.stringify name}"

    else
      # old code still uses mpd string commands.
      # check permissions
      name = request.split(/\s/)[0]
      if name is 'command_list_begin'
        commands = request.split('\n')
        commands.shift!
        commands.pop!
        for command of commands
          name = command.split(/\s/)[0]
          return unless check_permission name
      else
        return unless check_permission name
      @parser.sendRequest request, cb
