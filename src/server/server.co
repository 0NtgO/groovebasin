const
  fs = require 'fs'
  http = require 'http'
  net = require 'net'
  socketio = require 'socket.io'
  express = require 'express'
  path = require 'path'
  assert = require 'assert'
  DirectMpd = require './direct_mpd'
  async = require 'async'
  parseMpdConf = require('./mpdconf').parse
  {EventEmitter} = require('events')

process.env.HOST ||= "0.0.0.0"
process.env.PORT ||= "16242"
process.env.MPD_CONF ||= "/etc/mpd.conf"
process.env.STATE_FILE ||= ".state.json"
process.env.NODE_ENV ||= "dev"
process.env.LASTFM_API_KEY ||= "7d831eff492e6de5be8abb736882c44d"
process.env.LASTFM_SECRET ||= "8713e8e893c5264608e584a232dd10a0"

app = express()
app.configure !->
  app.use(express.static(path.join(__dirname, '../public')))
  app.use(express.static(path.join(__dirname, '../src/public')))
  app.disable('x-powered-by')

app_server = http.createServer(app)

io = socketio.listen(app_server)
io.set 'log level', 2

plugins =
  objects: {}
  bus: new EventEmitter()
  initialize: !(cb) ->
    const PLUGIN_PATH = path.join(__dirname, "plugins")
    fs.readdir PLUGIN_PATH, !(err, files) ~>
      return cb(err) if err
      for file of files
        continue unless /\.js$/.test(file)
        name = path.basename(file, ".js")
        Plugin = require("./plugins/#name")
        plugin = @objects[name] = new Plugin(@bus)
        plugin.on \state_changed, saveState
        plugin.on \status_changed, saveAndSendStatus
      cb()
  featuresList: ->
    ([name, plugin.is_enabled] for name, plugin in @objects)
  cbWhenReady: !(cb) ->
    async.parallel (plugin~cbWhenReady for name, plugin in @objects), cb

# state management
const STATE_VERSION = 2 # increment this when layout of state object changes
state =
  state_version: STATE_VERSION
  status: {} # this structure is visible to clients

mpd_conf = null
root_pass = null
accounts = null
default_account = null
my_mpd = null
my_mpd_socket = null
connect_success = true

async.series [
  plugins~initialize
  restoreState
  readMpdConf
  !(cb) ->
    plugins.bus.emit \app, app
    plugins.bus.emit \save_state, state
    cb()
  plugins.cbWhenReady
  theRestOfBootup
], assert.ifError

!function theRestOfBootup (cb)
  for [name, enabled] of plugins.featuresList()
    if enabled
      console.info "#{name} is enabled."
    else
      console.warn "#{name} is disabled."

  io.sockets.on 'connection', onSocketIoConnection

  connectServerMpd()

  process.on 'message', onProcessMessage

  host = process.env.HOST
  port = parseInt(process.env.PORT, 10)
  app_server.listen port, host, !->
    process.send 'online'
    console.info "Listening at http://#host:#port"
    cb()

function oncePerEventLoopFunc (fn)
  queued = false
  cbs = []
  !(cb) ->
    cbs.push(cb) if cb?
    return if queued
    queued := true
    process.nextTick !->
      queued := false
      fn !->
        cb(...) for cb of cbs

const saveState = oncePerEventLoopFunc !(cb) ->
  plugins.bus.emit \save_state, state
  fs.writeFile process.env.STATE_FILE, JSON.stringify(state, null, 4), "utf8", !(err) ->
    if err then console.error "Error saving state to disk: #{err.stack}"
    cb(err)

!function restoreState (cb)
  fs.readFile process.env.STATE_FILE, \utf8, !(err, data) ->
    if err?code is \ENOENT
      console.warn "No state file. Creating a new one."
      cb()
    return cb(err) if err
    try
      loaded_state = JSON.parse(data)
    catch e
      return cb(new Error("state file contains invalid JSON: #e"))
    if loaded_state.state_version is not STATE_VERSION
      return cb(new Error("State version is #{loaded_state.state_version} but should be #STATE_VERSION"))

    state := loaded_state

    # have the plugins restore and then save to delete values that should not
    # have been restored.
    plugins.bus.emit \restore_state, state
    plugins.bus.emit \save_state, state

    cb()

!function sendStatus
  plugins.bus.emit \status_sent, state.status
  io.sockets.emit 'Status', JSON.stringify state.status

!function saveAndSendStatus
  saveState()
  sendStatus()

!function readMpdConf (cb)
  mpd_conf_path = process.env.MPD_CONF
  fs.readFile mpd_conf_path, "utf8", !(error, contents) ->
    if error
      console.warn "Unable to read #{mpd_conf_path}: #{error}. Most features disabled."
      return cb()

    mpd_conf := parseMpdConf(contents)

    plugins.bus.emit \mpd_conf, mpd_conf, mpd_conf_path

    if mpd_conf.auto_update is not "yes"
      console.warn "recommended to turn auto_update on in #{mpd_conf_path}"
    if mpd_conf.gapless_mp3_playback is not "yes"
      console.warn "recommended to turn gapless_mp3_playback on in #{mpd_conf_path}"
    if mpd_conf.volume_normalization is not "yes"
      console.warn "recommended to turn volume_normalization on in #{mpd_conf_path}"
    if isNaN(n = parseInt(mpd_conf.max_command_list_size, 10)) or n < 16384
      console.warn "recommended to set max_command_list_size to >= 16384 in #{mpd_conf_path}"

    const all_permissions = "read,add,control,admin"
    function accountIsRoot (account)
      for perm of all_permissions.split(',')
        if not account[perm]
          return false
      return true

    default_account := arrayToSet((mpd_conf.default_permissions ? all_permissions).split(","))
    if accountIsRoot(default_account)
      root_pass := ""
    accounts := {}
    for account_str of (mpd_conf.password ? [])
      [password, perms] = account_str.split("@")
      accounts[password] = account = arrayToSet(perms.split(","))
      if not root_pass? and accountIsRoot(account)
        root_pass := password

    if default_account.admin
      console.warn "Anonymous users have admin permissions. Recommended to remove `admin` from `default_permissions` in #{mpd_conf_path}"
    if not root_pass?
      rand_pass = Math.floor(Math.random() * 99999999999)
      console.error """
        It is required to have at least one password which is granted all the
        permissions. Recommended to add this line in #{mpd_conf_path}:

          password "groovebasin-#{rand_pass}@#{all_permissions}"

        """
      return cb(new Error("mpd conf is missing root account"))
    cb()

function createMpdConnection (unix_socket, cb)
  if unix_socket and (path = mpd_conf?.bind_to_address?.unix_socket)?
    connection = net.connect path, cb
  else
    port = mpd_conf?.port ? 6600
    host = mpd_conf?.bind_to_address?.network ? "localhost"
    connection = net.connect port, host, cb
  connection.setEncoding('utf8')
  connection

!function connectBrowserMpd (socket)
  mpd_socket = createMpdConnection false, !->
    try socket.emit 'MpdConnect'
  mpd_socket.on 'data', !(data) ->
    socket.emit 'FromMpd', data
  mpd_socket.on 'end', !->
    try socket.emit 'MpdDisconnect'
  mpd_socket.on 'error', !->
    console.warn "browser no mpd daemon found."

  socket.removeAllListeners 'ToMpd'
  socket.on 'ToMpd', !(data) ->
    try mpd_socket.write data
  socket.removeAllListeners 'disconnect'
  socket.on 'disconnect', !->
    mpd_socket.end()

!function onSocketIoConnection (socket)
  connectBrowserMpd socket
  permissions = default_account
  plugins.bus.emit \socket_connect, socket, -> permissions
  socket.emit 'Permissions', JSON.stringify(permissions)
  socket.on 'Password', !(pass) ->
    if success = (ref = accounts[pass])?
      permissions := ref
    socket.emit 'Permissions', JSON.stringify(permissions)
    socket.emit 'PasswordResult', JSON.stringify(success)


!function connectServerMpd
  my_mpd_socket := createMpdConnection true, !->
    console.info "server to mpd connect"
    connect_success := true
    my_mpd.handleConnectionStart()
    if root_pass? and root_pass.length > 0
      my_mpd.authenticate root_pass

    # connect socket clients to mpd
    io.sockets.clients().forEach connectBrowserMpd
  my_mpd_socket.on 'end', !->
    console.warn "server mpd disconnect"
    tryReconnect()
  my_mpd_socket.on 'error', !->
    if connect_success
      connect_success := false
      console.warn "server no mpd daemon found."
    tryReconnect()
  my_mpd := DirectMpd(my_mpd_socket)
  my_mpd.on 'error', !(msg) -> console.error msg

  plugins.bus.emit \mpd, my_mpd

!function tryReconnect
  setTimeout connectServerMpd, 1000

function arrayToSet (array)
  obj = {}
  obj[item] = true for item of array
  obj

!function onProcessMessage (message)
  if message is 'shutdown'
    process.exit(0)

