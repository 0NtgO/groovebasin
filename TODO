Version 0.0.3 - I want to demo it at Hacker News meetup Tue March 6th 2012.
* ability to shift+click in library (implement selection.cursor)
* make right click menu work
  - queue, queue next
  - download
* ability to drag artists, albums, tracks to playlist

* online user interaction:
  - hotkey to focus chat box
  - queued tracks should know which user queued them
    > displayed as colors?
  - library songs should know which user uploaded them if any
* Time column disappears when window is too thin
* Time column can cut off part of 4-digit times
* option to not auto-queue uploaded songs
* ability to password protect - make it so that not everybody can kill mpd,
  enable/disable audio outputs, edit tags, upload tracks, change playback
  state, etc.
* ability to delete songs from library
* ability to edit tags
* ability to move a file to a better location based on its tags
* put song files in an intelligent place when uploading
* if you move a song that was chosen randomly, it and everything from
  it to current song are marked not random
  - however, this would be bad when you drag the last song to be next with keyboard shortcuts
* as part of lower casing for artist/album keys, change Ã± to n, etc.
  - like http://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/api/core/org/apache/lucene/analysis/ASCIIFoldingFilter.html
* shift+down select another item, shift+up unselect it
* dynamic mode populates twice when user clicks Clear
  - (due to mpd 'player' and 'playlist' events both being handled with empty playlist)
* refactor - server_status stuff should not be in Mpd class, it should be in
  GrooveBasinClient class or something like that.
* display an icon when connection to server is lost.
* attempt to reconnect when lost connection to server.
* display any mpd status error message
* ability to download songs in library
* ability to download multiple songs at once
  - more intelligent behavior when you click download for multiple selection
* library management
  - duplicate detection and elimination
    > if a song is byte for byte the same (check md5's) then ignore the
      new song
    > use heuristics to guess if songs are probably the same (using tags). if
      we are reasonably confident that the songs are the same, delete the one
      with the lower quality.
    > if we're not confident enough, there will be an
      api that lists possible duplicates and actions to resolve them.
  - when a song is added to the library, automatically replaygain scan it
    and the album from whence it came. Do this for update as well.
  - ability to add song to library by URL
* plugin API
  - plugin to scrobble songs to last.fm
    > global and per-user scrobbling
  - plugin to import songs to library from youtube URL
  - move dynamic playlist mode functionality to a plugin
* file folder inbox to import stuff
* take mpd's status into account. Make them editable?
  - consume
  - random
* good shuffle heuristics:
  - songs that get skipped more often have less probability of being
    randomly chosen.
  - ability to ban from random
    > keyboard shortcut 'B'
  - make dynamic playlist mode options configurable
* prepend '!' to a search word to NOT match the word. '\!' to literally match
  '!'. '\\' to literally match '\'
* ability to upload zip files
* smarter anticipation of commands to avoid the glitchy behavior when you do
  a repetitive action quickly, such as turning the volume down incrementally
  or moving a track down one space at a time
* make the list of uploaded files go away after they're all done.
* ability to filter playlist
* playlist management
  - save
  - display
  - grab individual tracks
  - switch to
